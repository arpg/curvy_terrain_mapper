#! /usr/bin/env python2

from dynamic_reconfigure.parameter_generator_catkin import *

RECONFIGURE_CLOSE = 3 # Parameters that need a sensor to be stopped completely when changed
RECONFIGURE_STOP = 1 # Parameters that need a sensor to stop streaming when changed
RECONFIGURE_RUNNING = 0 # Parameters that can be changed while a sensor is streaming

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

# gen.add("pub_viz", bool_t, RECONFIGURE_RUNNING,
#         "Convert the source images to several binary images by thresholding the source image with thresholds starting at minThreshold. These thresholds are incremented  by thresholdStep until maxThreshold.",
#         False)

preanalysis = gen.add_group("preanalysis")

preanalysis.add("dsFlag", bool_t, RECONFIGURE_RUNNING,
        "",
        True)
preanalysis.add("dsResolution", double_t, RECONFIGURE_RUNNING,
        "",
        0.01, 0.00001, 1.0)
preanalysis.add("neNeighMethod", int_t, RECONFIGURE_RUNNING,
        "",
        0, 0, 1)
preanalysis.add("neSearchNeighbours", int_t, RECONFIGURE_RUNNING,
        "",
        24, 1, 10000)
preanalysis.add("neSearchRadius", double_t, RECONFIGURE_RUNNING,
        "",
        0.2, 0.001, 100.0)
preanalysis.add("gpFlag", bool_t, RECONFIGURE_RUNNING,
        "",
        True)
preanalysis.add("gpAngle", double_t, RECONFIGURE_RUNNING,
        "",
        25.0, 0.0, 90.0)
preanalysis.add("pfActive", bool_t, RECONFIGURE_RUNNING,
        "",
        False)
preanalysis.add("pfAngle", double_t, RECONFIGURE_RUNNING,
        "",
        20.0, 0.0, 90.0)
preanalysis.add("fsActive", bool_t, RECONFIGURE_RUNNING,
        "",
        False)
preanalysis.add("fsAngle", double_t, RECONFIGURE_RUNNING,
        "",
        30.0, 0.0, 90.0)
preanalysis.add("fsRange", double_t, RECONFIGURE_RUNNING,
        "",
        0.05, 0.0, 1000.0)
preanalysis.add("rob_x", double_t, RECONFIGURE_RUNNING,
        "",
        0.0, -1000.0, 1000.0)
preanalysis.add("rob_y", double_t, RECONFIGURE_RUNNING,
        "",
        0.0, -1000.0, 1000.0)
preanalysis.add("rob_z", double_t, RECONFIGURE_RUNNING,
        "",
        0.0, -1000.0, 1000.0)
preanalysis.add("robAngle", double_t, RECONFIGURE_RUNNING,
        "",
        0.0, 0.0, 360.0)
preanalysis.add("dsMethod", bool_t, RECONFIGURE_RUNNING,
        "",
        False)
preanalysis.add("neMethod", int_t, RECONFIGURE_RUNNING,
        "",
        0, 0, 1)

gen.add("segmentationmode", int_t, RECONFIGURE_RUNNING,
        "",
        0, 0, 1)

regiongrowing = gen.add_group("region_growing")

regiongrowing.add("minClustSize", int_t, RECONFIGURE_RUNNING,
        "",
        30, 0, 10000)
regiongrowing.add("noNeigh", int_t, RECONFIGURE_RUNNING,
        "",
        24, 0, 10000)
regiongrowing.add("smoothFlag", bool_t, RECONFIGURE_RUNNING,
        "",
        False)
regiongrowing.add("smoothThresh", double_t, RECONFIGURE_RUNNING,
        "",
        50.0, 0.0, 1000.0)
regiongrowing.add("resFlag", bool_t, RECONFIGURE_RUNNING,
        "",
        True)
regiongrowing.add("resThresh", double_t, RECONFIGURE_RUNNING,
        "",
        0.08, 0.0, 1000.0)
regiongrowing.add("curvFlag", bool_t, RECONFIGURE_RUNNING,
        "",
        False)
regiongrowing.add("curvThresh", double_t, RECONFIGURE_RUNNING,
        "",
        0.1, 0.0, 1000.0)
regiongrowing.add("updateFlag", bool_t, RECONFIGURE_RUNNING,
        "",
        True)
regiongrowing.add("pointUpdateFlag", bool_t, RECONFIGURE_RUNNING,
        "",
        True)
regiongrowing.add("updateInterval", int_t, RECONFIGURE_RUNNING,
        "",
        100, 0, 10000)

costmap = gen.add_group("costmap")

costmap.add("normal_gain", double_t, RECONFIGURE_RUNNING,
        "",
        4.0, 0.0, 1000.0)
costmap.add("curv_gain", double_t, RECONFIGURE_RUNNING,
        "",
        30.0, 0.0, 10000.0)
        
exit(gen.generate('curvy_terrain_mapper', "curvy_terrain_mapper_node", "CurvyTerrainMapper"))
